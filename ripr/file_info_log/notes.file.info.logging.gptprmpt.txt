
=================================================

prompt:


python script called file_info_log.py 
to get owner,group,perms,filepath, dockers-hostpc-hostname, timestamp=now of
/srv/dkr/metabase6176d/sysdata/mysqldata/ib_logfile0.

write to table file_perms_log using pymysql.
owner,group,perms,fpath current_timestamp,file_modified_timestamp,hostname.
create table if not exists. make fields default to null.
use db: 10.4.65.191:7411 ripr684 db user a password a

get secrets, user/pass, from a file called .env.
get other settings from an ini file called settings.ini with a section called [one]. These include paths, logfile, db host port, etc.

use logging to write log to /ap/log/fileinfolog.log. write the same info to log as to db. use tab separated csv format.

Use conda env called env01
run once and stop. use cron to run it each minute.

datetime DEFAULT NULL,


=================================================

notes:

http://pmdsdata8.stackpole.ca:6189//?server=10.4.65.191%3A7411&username=a&db=ripr684&select=file_perms_log

see tools599 ripr file info log
    /ap/tools599/ripr/file_info_log


install miniconda

https://docs.anaconda.com/miniconda/#miniconda-latest-installer-links

  cd
  mkdir -p ~/miniconda3 && \
  wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh && \
  bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
  # The above works, but there is no entry in the .bashrc for base env activation. So do the following.. 
    source ~/miniconda3/bin/activate
    conda init
  
  # after install. prevent auto activation of base: 
  conda config --set auto_activate_base false



Run..

/home/albe/miniconda3/envs/env01/bin/python

/home/albe/miniconda3/envs/env01/bin/python /ap/tools599/ripr/file_info_log/file_info_log.py


crontab -e

* * * * * cd /ap/tools599/ripr/file_info_log/ && /home/albe/miniconda3/envs/env01/bin/python /ap/tools599/ripr/file_info_log/file_info_log.py


=================================================



import os
import pwd
import grp
import stat
import time
import socket
import logging
import pymysql
from configparser import ConfigParser
from datetime import datetime
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Load settings from ini file
config = ConfigParser()
config.read('settings.ini')

# Configure logging
log_file = config['one']['log_file']
logging.basicConfig(filename=log_file, level=logging.INFO, format='%(message)s')

# File path and database connection details from ini file and environment variables
file_path = config['one']['file_path']
db_host = config['one']['db_host']
db_port = int(config['one']['db_port'])
db_user = os.getenv('DB_USER')
db_password = os.getenv('DB_PASSWORD')
db_name = config['one']['db_name']

# Function to get file information
def get_file_info(file_path):
    file_stat = os.stat(file_path)
    owner = pwd.getpwuid(file_stat.st_uid).pw_name  
    group = grp.getgrgid(file_stat.st_gid).gr_name 
    perms = stat.filemode(file_stat.st_mode)       
    modified_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(file_stat.st_mtime))
    return owner, group, perms, modified_time

# Function to log information to database
def log_to_database(data):
    connection = pymysql.connect(host=db_host, port=db_port, user=db_user, password=db_password, db=db_name)
    try:
        with connection.cursor() as cursor:
            create_table_query = """
                CREATE TABLE IF NOT EXISTS file_perms_log (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    owner VARCHAR(50),
                    `group` VARCHAR(50),
                    perms VARCHAR(10),
                    fpath VARCHAR(255),
                    `current_timestamp` datetime DEFAULT NULL,
                    file_modified_timestamp datetime DEFAULT NULL,
                    hostname VARCHAR(255)
                )
            """
            cursor.execute(create_table_query)
            insert_query = """
                INSERT INTO file_perms_log (`current_timestamp`, owner, `group`, perms, fpath,  file_modified_timestamp, hostname)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """
            cursor.execute(insert_query, data)
        connection.commit()
    finally:
        connection.close()

# Main function to gather and log file information
def main():
    owner, group, perms, modified_time = get_file_info(file_path)
    hostname = socket.gethostname()
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_data = ( current_time, owner, group, perms, file_path,  modified_time, hostname)
    
    # Log to the database
    log_to_database(log_data)

    # Log to the log file in CSV format
    log_line = '\t'.join(log_data)
    logging.info(log_line)

# Run the main function once
if __name__ == '__main__':
    main()
    
    
    
    
=================================================



cd /ap/tools599/ripr/file_info_log/ && /home/albe/miniconda3/envs/env01/bin/python /ap/tools599/ripr/file_info_log/file_info_log.py



